#!/bin/bash

if [[ -L "$0" ]]; then
  SCRIPT_DIR=$(dirname $(readlink $0));
else
  SCRIPT_DIR=$(dirname $0);
fi

echo $SCRIPT_DIR
source ${SCRIPT_DIR}/cmd_parser.sh

print_vars;

ARCH_NAME_="${ARG_arch}"
EXE_SPACE_="${ARG_execSpace}"
ENABLE_PREC_="${ARG_prec}"
BLAS_CONCURRENCY_="${ARG_blasThreaded}"
ENABLE_HUGEPAGES_="${ARG_hugepages}"
EXTRA_INSTALL_STRING=${ARG_buildID}

ENABLE_MUELU_="true"
BUILD_LABEL="${ARCH_NAME_}-${EXE_SPACE_}"

if [ "$ARCH_NAME_" == "hsw" ]; then
  module -s swap craype-mic-knl craype-haswell
elif [ "$ARCH_NAME_" == "knl" ]; then
  module -s swap craype-haswell craype-mic-knl
elif [ "$ARCH_NAME_" == "hsw-knl" ]; then
  module -s swap craype-haswell craype-mic-knl
fi


if [ "$ENABLE_PREC_" == "true" ]; then
  BUILD_LABEL="${BUILD_LABEL}-prec"
fi

if [ "${ENABLE_HUGEPAGES_}" != "none" ]; then
  BUILD_LABEL="${BUILD_LABEL}_hp-${ENABLE_HUGEPAGES_}"
  module load craype-hugepages${ENABLE_HUGEPAGES_}M
  echo "module load craype-hugepages${ENABLE_HUGEPAGES_}M"
fi

# This script expects testbed (not SEMS!) modules to be loaded already.
TRILINOS_INSTALL_PREFIX=${PROJECT_DIR}/install
#Set path to Trilinos:
TRILINOS_PATH=${HOME}/src/Trilinos
TRILINOS_VERSION=`grep "Trilinos_VERSION " ${TRILINOS_PATH}/Version.cmake | cut -f2 -d' ' | tr -d ')'`
COMPILER_NAME=intel
COMPILER_VERSION=${INTEL_VERSION}
TRILINOS_INSTALL=${TRILINOS_INSTALL_PREFIX}/trilinos-${TRILINOS_VERSION}/${COMPILER_NAME}-${COMPILER_VERSION}_${MPI_VENDOR}-${MPI_VERSION}_${BUILD_LABEL}-${EXTRA_INSTALL_STRING}

# You could load a devpack here, but for now assume it was loaded.
# module load devpack

# Set up backends for Trilinos
export CUDA=OFF
export OPENMP=OFF
export PTHREAD=OFF
export SERIAL=OFF
export COMPLEX=OFF

export CORES_PER_TEST=1
export HT_PER_CORE=1

export BLAS_LIBRARIES=""
export BLAS_DIRS=""

export EXTRA_FLAGS=""
export EXTRA_OPTIONS=""
export EXTRA_LINKER_OPTS=""

if [ "${EXE_SPACE_}" == "openmp" ]; then
  export OPENMP=ON
  export SERIAL=ON
  export CORES_PER_TEST=4
  export HT_PER_CORE=2
elif [ "${EXE_SPACE_}" == "serial" ]; then
  export SERIAL=ON
fi

if [ "${BLAS_CONCURRENCY_}" == "threaded" ]; then
  export BLAS_DIRS="${MKLROOT}/lib/intel64;${MKLROOT}/../compiler/lib/intel64/"
  export BLAS_LIBRARIES="mkl_intel_lp64;mkl_intel_thread;mkl_core;iomp5;m;dl"
  export EXTRA_FLAGS="-mkl=parallel"
elif [ "${BLAS_CONCURRENCY_}" == "sequential" ]; then
  export BLAS_DIRS="${MKLROOT}/lib/intel64;${MKLROOT}/../compiler/lib/intel64/"
  export BLAS_LIBRARIES="mkl_intel_lp64;mkl_sequential;mkl_core;m;dl"
  export EXTRA_FLAGS="-mkl=sequential"
fi


if [ "${ENABLE_PREC_}" == "true" ]; then
  export EXTRA_FLAGS="${EXTRA_FLAGS} -fp-model precise"
fi

# Set up Architecture

#Intel Haswell
if [ "${ARCH_NAME_}" == "hsw" ]; then
export ARCH_CXX_FLAG="-xCORE-AVX2 ${EXTRA_FLAGS}"
export ARCH_C_FLAG="-xCORE-AVX2 ${EXTRA_FLAGS}"
export LAPACK_LIBRARIES=${BLAS_LIBRARIES}
fi

# If you want KNL, uncomment the lines below (up to but not including
# "IBM Power8"), if they are not already uncommented.

#Intel KNL
if [ "${ARCH_NAME_}" == "knl" ]; then
export ARCH_CXX_FLAG="-xMIC-AVX512 ${EXTRA_FLAGS}"
export ARCH_C_FLAG="-xMIC-AVX512 ${EXTRA_FLAGS}"
export LAPACK_LIBRARIES=${BLAS_LIBRARIES}
fi

if [ "${ARCH_NAME_}" == "novec" ]; then
export ARCH_CXX_FLAG="-no-vec -no-simd ${EXTRA_FLAGS}"
export ARCH_C_FLAG="-no-vec -no-simd ${EXTRA_FLAGS}"
export LAPACK_LIBRARIES=${BLAS_LIBRARIES}
fi

if [ "${ARCH_NAME_}" == "hsw-knl" ]; then
export ARCH_CXX_FLAG="-xMIC-AVX512 -axCORE-AVX2,MIC-AVX512 ${EXTRA_FLAGS}"
export ARCH_C_FLAG="-xMIC-AVX512 -axCORE-AVX2,MIC-AVX512 ${EXTRA_FLAGS}"
export LAPACK_LIBRARIES=${BLAS_LIBRARIES}
fi

echo $ARCH_CXX_FLAG
echo $ARCH_C_FLAG

export TESTS=OFF
export EXAMPLES=OFF

# enable the stuff for muelu studies
export ENABLE_MUELU=${ENABLE_MUELU_}

# Set up number of OpenMP Threads:

###############################################
###############################################
# Don't change things below
###############################################
###############################################

# This sets Jenkins-related environment variables.  It's for the
# script below, which expects those environment variables to be set,
# even if not running Jenkins.

export JENKINS_DO_CUDA=${CUDA}
export JENKINS_DO_OPENMP=${OPENMP}
export JENKINS_DO_PTHREAD=${PTHREAD}
export JENKINS_DO_SERIAL=${SERIAL}
export JENKINS_DO_COMPLEX=${COMPLEX}

export JENKINS_ARCH_CXX_FLAG=${ARCH_CXX_FLAG}
export JENKINS_ARCH_C_FLAG=${ARCH_C_FLAG}

export JENKINS_DO_TESTS=${TESTS}
export JENKINS_DO_EXAMPLES=${EXAMPLES}

echo "Loaded modules: "
module -s rm cmake
module -s load cmake/3.8.2
source ${HOME}/src/Scripts/tpls.env
module list
echo "Final set of loaded modules: "
module list
echo "Writing build.modules to current directory"
echo "module purge" > build.modules;
echo -n "module load " > build.modules;
script -qc "module list --terse -s" | grep -v "Currently" |& tee | tr -d '\r' | tr '\n' ' ' >> build.modules

# This actually runs CMake.

source ${SCRIPT_DIR}/configure-cori-cmake

