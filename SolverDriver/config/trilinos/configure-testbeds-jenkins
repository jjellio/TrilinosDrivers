#!/bin/bash

rm -f CMakeCache.txt;
rm -rf CMakeFiles
echo ""
echo "WARNING: In order to get modules correctly loaded source this files, don't just execute it."
echo ""
EXTRA_ARGS=$@

let OMP_NUM_THREADS=CORES_PER_TEST*HT_PER_CORE
export OMP_NUM_THREADS

# Trilinos Path:
#TRILINOS_PATH=${HOME}/Trilinos

# Top Level Configuration Options
TESTS=${JENKINS_DO_TESTS}
EXAMPLES=${JENKINS_DO_EXAMPLES}

CUDA=${JENKINS_DO_CUDA}
OPENMP=${JENKINS_DO_OPENMP}
PTHREAD=${JENKINS_DO_PTHREAD}
SERIAL=${JENKINS_DO_SERIAL}

COMPLEX=${JENKINS_DO_COMPLEX}


MUELU_DETAILS=""
if [ "${ENABLE_MUELU}" == "true" ]; then
  MUELU_DETAILS="${MUELU_DETAILS} -D Tpetra_ENABLE_MMM_Timings:BOOL=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_MueLu=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D MueLu_ENABLE_TESTS=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D MueLu_ENABLE_EXAMPLES=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D TpetraKernels_ENABLE_Experimental:BOOL=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Xpetra=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Zoltan=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Zoltan_ENABLE_TESTS=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D Zoltan_ENABLE_EXAMPLES=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Isorropia=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Galeri=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Pamgen=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Shards=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_TrilinosSS=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Teuchos=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Epetra=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_EpetraExt=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_AztecOO=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Amesos=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Stratimikos=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Anasazi=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Anasazi_ENABLE_RBGen=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Ifpack=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_ML=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Teko=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_NOX=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Thyra=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Rythmos=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Sacado=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Stokhos=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Panzer=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Amesos2=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Amesos2_ENABLE_KLU2=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Ifpack2=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_Zoltan2=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D Zoltan2_ENABLE_TESTS=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D Zoltan2_ENABLE_EXAMPLES=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D Trilinos_ENABLE_STK=ON"
  MUELU_DETAILS="${MUELU_DETAILS} -D TPL_ENABLE_X11=OFF"
  MUELU_DETAILS="${MUELU_DETAILS} -D TPL_ENABLE_Matio=OFF"
fi

HDF5_BOTH_LIBRARIES="\
${HDF5_ROOT}/lib/libhdf5hl_fortran_parallel.a;\
${HDF5_ROOT}/lib/libhdf5hl_fortran.a;\
${HDF5_ROOT}/lib/libhdf5_fortran_parallel.a;\
${HDF5_ROOT}/lib/libhdf5_fortran.a;\
${HDF5_ROOT}/lib/libhdf5_hl_parallel.a;\
${HDF5_ROOT}/lib/libhdf5_hl.a;\
${HDF5_ROOT}/lib/libhdf5_parallel.a;\
${HDF5_ROOT}/lib/libhdf5.a"


HDF5_PARALLEL_LIBRARIES="\
${HDF5_ROOT}/lib/libhdf5hl_fortran_parallel.a;\
${HDF5_ROOT}/lib/libhdf5_fortran_parallel.a;\
${HDF5_ROOT}/lib/libhdf5_hl_parallel.a;\
${HDF5_ROOT}/lib/libhdf5_parallel.a"

HDF5_SERIAL_LIBRARIES="\
${HDF5_ROOT}/lib/libhdf5hl_fortran.a;\
${HDF5_ROOT}/lib/libhdf5_fortran.a;\
${HDF5_ROOT}/lib/libhdf5_hl.a;\
${HDF5_ROOT}/lib/libhdf5.a"

HDF5_LIBRARY_NAMES="hdf5hl_fortran;hdf5_fortran;hdf5_hl;hdf5"

let cores=CORES_PER_TEST/HT_PER_CORE
export BLAS_LAPACK_LIBRARY_DIRS=${BLAS_DIRS}
export BLAS_LAPACK_LIBRARY_NAMES=${BLAS_LIBRARIES}
#--------------------------------------------------
#--------------------------------------------------


# CMAKE Command structured
#
# Basic Options for backends (Enable OpenMP etc.)
# \
# Build control (flags, debug, ETI)
# \
# Generic CMake options 
# \
# TPL Setup
# \
# Packages (on/off, tests, examples)
time \
cmake \
-D Trilinos_ENABLE_OpenMP=${OPENMP} \
-D Kokkos_ENABLE_Pthread=${PTHREAD} \
-D TPL_ENABLE_Pthread=OFF \
-D TPL_ENABLE_CUDA=${CUDA} \
  -D Kokkos_ENABLE_Cuda_UVM:BOOL=ON \
-D Teuchos_ENABLE_COMPLEX=${COMPLEX} \
\
-D Trilinos_LINK_SEARCH_START_STATIC:BOOL=OFF \
-D MPI_USE_COMPILER_WRAPPERS=OFF \
-D CMAKE_CXX_COMPILER="${MPICXX}" \
-D CMAKE_C_COMPILER="${MPICC}" \
-D CMAKE_CXX_FLAGS="${JENKINS_ARCH_CXX_FLAG}" \
-D CMAKE_C_FLAGS="${JENKINS_ARCH_C_FLAG}" \
-D CMAKE_Fortran_FLAGS="${JENKINS_ARCH_C_FLAG}" \
-D CMAKE_EXE_LINKER_FLAGS="${JENKINS_ARCH_C_FLAG} ${EXTRA_LINKER_OPTS}" \
-D CMAKE_Fortran_COMPILER="${MPIFC}" \
\
-D HAVE_GCC_ABI_DEMANGLE:BOOL=TRUE \
\
-D Trilinos_ENABLE_EXPLICIT_INSTANTIATION:BOOL=ON \
-D Trilinos_ENABLE_DEBUG:BOOL=OFF \
\
-D CMAKE_INSTALL_PREFIX:PATH="${TRILINOS_INSTALL}" \
-D Trilinos_ENABLE_INSTALL_CMAKE_CONFIG_FILES:BOOL=ON \
-D CMAKE_BUILD_TYPE:STRING=RELEASE \
-D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF \
-D Trilinos_ENABLE_ALL_PACKAGES:BOOL=OFF \
-D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
-D Trilinos_ENABLE_TESTS:BOOL=OFF \
-D Trilinos_ENABLE_EXAMPLES:BOOL=OFF \
-D BUILD_SHARED_LIBS:BOOL=ON \
-D Trilinos_SET_INSTALL_RPATH=ON \
-D DART_TESTING_TIMEOUT:STRING=200 \
-D Trilinos_ENABLE_CXX11=ON \
\
-D TPL_ENABLE_MPI=ON \
  -D MPI_EXEC:PATH="${MPI_EXEC_NAME}" \
  -D MPI_EXEC_NUMPROCS_FLAG:STRING="${MPI_EXEC_FLAGS}" \
-D TPL_ENABLE_SuperLU=OFF \
  -D TPL_SuperLU_LIBRARIES:STRING="${SUPERLU_ROOT}/lib/libsuperlu.a" \
  -D TPL_SuperLU_INCLUDE_DIRS:STRING="${SUPERLU_ROOT}/include" \
-D TPL_ENABLE_BLAS=ON \
   -D BLAS_LIBRARY_DIRS:PATH="${BLAS_LAPACK_LIBRARY_DIRS}" \
   -D BLAS_LIBRARY_NAMES:STRING="${BLAS_LAPACK_LIBRARY_NAMES}" \
-D TPL_ENABLE_LAPACK=ON \
   -D LAPACK_LIBRARY_DIRS:PATH="${BLAS_LAPACK_LIBRARY_DIRS}" \
   -D LAPACK_LIBRARY_NAMES:STRING="${BLAS_LAPACK_LIBRARY_NAMES}" \
-D TPL_ENABLE_Boost=ON \
   -D Boost_INCLUDE_DIRS:PATH="${BOOST_ROOT}/include" \
   -D Boost_LIBRARY_DIRS:PATH="${BOOST_ROOT}/lib" \
-D TPL_ENABLE_BoostLib=ON \
   -D BoostLib_INCLUDE_DIRS:PATH="${BOOST_ROOT}/include" \
   -D BoostLib_LIBRARY_DIRS:PATH="${BOOST_ROOT}/lib" \
\
-D TPL_ENABLE_Netcdf=ON \
  -D Netcdf_INCLUDE_DIRS:PATH="${PNETCDF_ROOT}/include;${NETCDF_ROOT}/include" \
  -D Netcdf_LIBRARY_DIRS:PATH="${PNETCDF_ROOT}/lib;${NETCDF_ROOT}/lib;${HDF5_ROOT}/lib" \
  -D Netcdf_LIBRARY_NAMES:STRING="netcdf;pnetcdf;${HDF5_LIBRARY_NAMES};z" \
  -D TPL_Netcdf_Enables_Netcdf4:BOOL=ON \
  -D TPL_Netcdf_Enables_PNetcdf:BOOL=ON \
  -D TPL_Netcdf_PARALLEL:BOOL=ON \
 \
-D TPL_ENABLE_HDF5=ON \
  -D HDF5_INCLUDE_DIRS:PATH="${HDF5_ROOT}/include" \
  -D HDF5_LIBRARY_DIRS:PATH="${HDF5_ROOT}/lib" \
  -D HDF5_LIBRARY_NAMES:STRING="${HDF5_LIBRARY_NAMES};z" \
\
-D TPL_ENABLE_CGNS=OFF \
  -D CGNS_INCLUDE_DIRS:PATH="${CGNS_ROOT}/include" \
  -D CGNS_LIBRARY_DIRS:PATH="${CGNS_ROOT}/lib" \
\
-D TPL_ENABLE_DLlib=ON \
\
-D TPL_ENABLE_METIS=ON \
  -D METIS_INCLUDE_DIRS:PATH=${METIS_ROOT}/include \
  -D METIS_LIBRARY_DIRS:PATH=${METIS_ROOT}/lib \
-D TPL_ENABLE_ParMETIS=ON \
  -D ParMETIS_INCLUDE_DIRS:PATH=${PARMETIS_ROOT}/include \
  -D ParMETIS_LIBRARY_DIRS:PATH="${PARMETIS_ROOT}/lib;${METIS_ROOT}/lib" \
  -D ParMETIS_LIBRARY_NAMES:STRING="parmetis;metis" \
   \
-D TPL_ENABLE_Zlib=ON \
-D TPL_ENABLE_SuperLUDist=OFF \
  -D SuperLUDist_INCLUDE_DIRS:PATH=${SUPERLUDIST_ROOT}/include \
  -D SuperLUDist_LIBRARY_DIRS:PATH=${SUPERLUDIST_ROOT}/lib \
  -D SuperLUDist_LIBRARY_NAMES:STRING="superlu_dist_4.3" \
\
-D TPL_ENABLE_yaml-cpp=ON \
   -D yaml-cpp_LIBRARY_DIRS:PATH=${YAMLCPP_ROOT}/lib \
   -D yaml-cpp_INCLUDE_DIRS:PATH=${YAMLCPP_ROOT}/include \
\
-D Trilinos_ENABLE_Kokkos=ON \
  -D Trilinos_ENABLE_Gtest=ON \
  -D Kokkos_ENABLE_TESTS:BOOL=${TESTS} \
  -D Kokkos_ENABLE_Serial:BOOL=${SERIAL} \
  -D Kokkos_ENABLE_OpenMP:BOOL=${OPENMP} \
  -D Kokkos_ENABLE_Pthread:BOOL=${PTHREAD} \
  -D Kokkos_ENABLE_Cuda:BOOL=${CUDA} \
-D Trilinos_ENABLE_Tpetra=ON \
  -D Tpetra_INST_SERIAL:BOOL=${SERIAL} \
  -D Tpetra_INST_OPENMP:BOOL=${OPENMP} \
  -D Tpetra_INST_PTHREAD:BOOL=${PTHREAD} \
  -D Tpetra_INST_CUDA:BOOL=${CUDA} \
  -D Tpetra_INST_COMPLEX_DOUBLE:BOOL=${COMPLEX} \
  -D Tpetra_ENABLE_TESTS:BOOL=${TESTS} \
  -D Tpetra_ENABLE_EXAMPLES:BOOL=${EXAMPLES} \
\
-D Trilinos_ENABLE_Belos=ON \
-D Trilinos_ENABLE_Teuchos=ON \
-D Belos_ENABLE_TESTS=OFF \
-D Belos_ENABLE_TEUCHOS_TIME_MONITOR=ON \
-D Belos_Tpetra_Timers:BOOL=ON \
-D Trilinos_ENABLE_TriUtils=ON \
-D Trilinos_ENABLE_Intrepid=OFF \
-D Intrepid_ENABLE_KokkosCore=ON \
-D Trilinos_ENABLE_Intrepid2=ON \
-D Trilinos_ENABLE_Pamgen=ON \
-D Trilinos_ENABLE_TrilinosCouplings=OFF \
-D TrilinosCouplings_ENABLE_EXAMPLES=OFF \
\
-D Trilinos_ENABLE_STKMesh=ON \
-D Trilinos_ENABLE_STKIO:BOOL=ON \
-D Trilinos_ENABLE_STKTransfer:BOOL=ON \
-D Trilinos_ENABLE_STKSearch:BOOL=ON \
-D Trilinos_ENABLE_STKUtil:BOOL=ON \
-D Trilinos_ENABLE_STKTopology:BOOL=ON \
-D Trilinos_ENABLE_STKDoc_tests=OFF \
-D Trilinos_ENABLE_Gtest:BOOL=ON \
-D Trilinos_ENABLE_STKClassic:BOOL=OFF \
-D Trilinos_ENABLE_SEACASExodus:BOOL=ON \
-D Trilinos_ENABLE_SEACASEpu:BOOL=ON \
-D Trilinos_ENABLE_SEACASExodiff:BOOL=ON \
-D Trilinos_ENABLE_SEACASNemspread:BOOL=ON \
-D Trilinos_ENABLE_SEACASNemslice:BOOL=ON \
\
${MUELU_DETAILS} \
\
${EXTRA_OPTIONS} \
$EXTRA_ARGS \
${TRILINOS_PATH}


echo "export TRILINOS_INSTALL=${TRILINOS_INSTALL}"
#   -D HAVE_PARMETIS_VERSION_4_0_3:BOOL=ON \


#-D TPL_ENABLE_Netcdf=ON \
#  -D Netcdf_INCLUDE_DIRS:PATH="${NETCDF_ROOT}/include" \
#  -D Netcdf_LIBRARY_DIRS:PATH="${NETCDF_ROOT}/lib" \
#  -D TPL_Netcdf_LIBRARIES:PATH="${NETCDF_ROOT}/lib/libnetcdf.a;${HDF5_ROOT}/lib/libhdf5hl_fortran.a;${HDF5_ROOT}/lib/libhdf5_fortran.a;${HDF5_ROOT}/lib/libhdf5_hl.a;${HDF5_ROOT}/lib/libhdf5.a;${PNETCDF_ROOT}/lib/libpnetcdf.a;/usr/lib64/libz.a" \
#  -D TPL_Netcdf_PARALLEL:BOOL=ON \
#-D TPL_ENABLE_HDF5=ON \
#  -D HDF5_INCLUDE_DIRS:PATH="${HDF5_ROOT}/include" \
#  -D TPL_HDF5_LIBRARIES:PATH="${HDF5_ROOT}/lib/libhdf5hl_fortran.a;${HDF5_ROOT}/lib/libhdf5_fortran.a;${HDF5_ROOT}/lib/libhdf5_hl.a;${HDF5_ROOT}/lib/libhdf5.a;/usr/lib64/libz.a" \
#i   -D TPL_HDF5_LIBRARIES:PATH="${HDF5_PARALLEL_LIBRARIES};/usr/lib64/libz.a" \


