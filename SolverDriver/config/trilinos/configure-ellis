#!/bin/bash

ARCH_NAME_=""
EXE_SPACE_=""
ENABLE_MUELU_=""
BUILD_LABEL=""
ENABLE_PREC_=""

if [ "$1" == "hsw" ]; then
  ARCH_NAME_="hsw";
  module -s swap craype-mic-knl craype-haswell
elif [ "$1" == "knl" ]; then
  ARCH_NAME_="knl";
  module -s swap craype-haswell craype-mic-knl
else
  echo "ERROR, please specify an architecture to build for."
  echo "$0 hsw|knl [openmp|serial]"
  exit;
fi


if [ "$2" == "serial" ]; then
  EXE_SPACE_="serial"
elif [ "$2" == "openmp" ]; then
  EXE_SPACE_="openmp";
elif [ "$2" == "serial-openmp" ]; then
  EXE_SPACE_="serial-openmp";
fi


if [ "$3" == "prec" ]; then
  ENABLE_PREC_="true"
  BUILD_LABEL="${ARCH_NAME_}-${EXE_SPACE_}-prec"
else
  ENABLE_PREC_="false"
  BUILD_LABEL="${ARCH_NAME_}-${EXE_SPACE_}"
fi

ENABLE_MUELU_="true"


echo "Loaded modules: "
module -s load cmake
module list
echo "Loading Sparc TPLs: "
# source the TPLs built for sparc... they have compatible HDF5
# iolibs' netcdf is compiled against a different version of HDF5
# which will not work
source /home/jjellio/src/trilinos-perf/SolverDriver/config/sparc/sparc-ellis.env
#module swap openmpi/1.10.4/intel/17.0.098 intel/mpi/2017.0.098
#export MPICC=mpiicc
#export MPICXX=mpiicpc
#export MPICFC=mpiifort
#export MPI_VENDOR=intel
#export MPI_VERSION=2017.0.098


echo "Final set of loaded modules: "
module list
echo "Writing build.modules to current directory"
echo "module purge" > build.modules;
echo -n "module load " > build.modules;
script -qc "module list --terse -s" | grep -v "Currently" |& tee | tr -d '\r' | tr '\n' ' ' >> build.modules




# This script expects testbed (not SEMS!) modules to be loaded already.
TRILINOS_INSTALL_PREFIX=/home/jjellio
#Set path to Trilinos:
TRILINOS_PATH=/home/jjellio/src/Trilinos
TRILINOS_VERSION=`grep "Trilinos_VERSION " ${TRILINOS_PATH}/Version.cmake | cut -f2 -d' ' | tr -d ')'`
COMPILER_NAME=intel
COMPILER_VERSION=${INTEL_VERSION}
TRILINOS_INSTALL=${TRILINOS_INSTALL_PREFIX}/install/trilinos-${TRILINOS_VERSION}/${COMPILER_NAME}-${COMPILER_VERSION}_${MPI_VENDOR}-${MPI_VERSION}_${BUILD_LABEL}

# You could load a devpack here, but for now assume it was loaded.
# module load devpack

# Set up backends for Trilinos
export CUDA=OFF
export OPENMP=OFF
export PTHREAD=OFF
export SERIAL=OFF
export COMPLEX=OFF

export CORES_PER_TEST=1
export HT_PER_CORE=1

export BLAS_LIBRARIES=""
export BLAS_DIRS=""

export EXTRA_FLAGS=""
export EXTRA_OPTIONS=""
export EXTRA_LINKER_OPTS=""

if [ "${EXE_SPACE_}" == "openmp" ]; then
  export OPENMP=ON
  export CORES_PER_TEST=4
  export HT_PER_CORE=2
  export BLAS_DIRS="${MKLROOT}/lib/intel64;${MKLROOT}/../lib/intel64"
  export EXTRA_LINKER_OPTS="-L${MKLROOT}/lib/intel64 -L${MKLROOT}/../lib/intel64"
  export BLAS_LIBRARIES="mkl_intel_lp64;mkl_intel_thread;mkl_core;iomp5;pthread;m;dl"
  export EXTRA_FLAGS="-mkl=parallel"
fi

if [ "${EXE_SPACE_}" == "serial" ]; then
  export SERIAL=ON
  export BLAS_DIRS="${MKLROOT}/lib/intel64;${MKLROOT}/../lib/intel64"
  export EXTRA_LINKER_OPTS="-L${MKLROOT}/lib/intel64"
  export BLAS_LIBRARIES="mkl_intel_lp64;mkl_sequential;mkl_core;pthread;m;dl"
  export EXTRA_FLAGS="-mkl=sequential"
fi


if [ "${EXE_SPACE_}" == "serial-openmp" ]; then
  export SERIAL=ON
  export OPENMP=ON
  export BLAS_DIRS="${MKLROOT}/lib/intel64;${MKLROOT}/../lib/intel64"
  export EXTRA_LINKER_OPTS="-L${MKLROOT}/lib/intel64 -L${MKLROOT}/../lib/intel64"
  export BLAS_LIBRARIES="mkl_intel_lp64;mkl_sequential;mkl_core;pthread;m;dl"
  export EXTRA_FLAGS="-mkl=sequential"
  export EXTRA_OPTIONS="-D Tpetra_DefaultNode:STRING=Kokkos::Compat::KokkosSerialWrapperNode"
fi

export MPI_EXEC_NAME="mpirun"
# --map-by NUMA:PE=2 --bind-to core 
export MPI_EXEC_FLAGS="-x;OMP_PLACES=cores;-x;OMP_DISPLAY_ENV=verbose;--map-by;NUMA:PE=${CORES_PER_TEST};--map-by;core;-np" \


if [ "${ENABLE_PREC_}" == "true" ]; then
  export EXTRA_FLAGS="${EXTRA_FLAGS} -fp-model precise"
fi

# Set up Architecture

# If you want Intel Sandy Bridge or Ivy Bridge, uncomment the lines
# below (up to but not including "Intel Haswell"), if they are not
# already uncommented.  (This one has not yet been tested.  All the
# others have been tested.)

#Intel SandyBridge / IvyBridge
#export ARCH_CXX_FLAG="-mavx"
#export ARCH_C_FLAG="-mavx"
#export BLAS_LIBRARIES="-lblas"
#export LAPACK_LIBRARIES="-llapack" 

# If you want Intel Haswell, uncomment the lines below (up to but not
# including "Intel KNL"), if they are not already uncommented.

#Intel Haswell
if [ "${ARCH_NAME_}" == "hsw" ]; then
export ARCH_CXX_FLAG="-xCORE-AVX2 ${EXTRA_FLAGS}"
export ARCH_C_FLAG="-xCORE-AVX2 ${EXTRA_FLAGS}"
export LAPACK_LIBRARIES=${BLAS_LIBRARIES}
fi

# If you want KNL, uncomment the lines below (up to but not including
# "IBM Power8"), if they are not already uncommented.

#Intel KNL
if [ "${ARCH_NAME_}" == "knl" ]; then
export ARCH_CXX_FLAG="-xMIC-AVX512 ${EXTRA_FLAGS}"
export ARCH_C_FLAG="-xMIC-AVX512 ${EXTRA_FLAGS}"
export LAPACK_LIBRARIES=${BLAS_LIBRARIES}
fi

# If you want IBM Power8 withOUT GPUs, uncomment the lines below (up
# to but not including "IBM Power8 + NVIDIA K80"), if they are not
# already uncommented.

#IBM Power8:
#export ARCH_CXX_FLAG="-mcpu=power8"
#export ARCH_C_FLAG="-mcpu=power8"
#export BLAS_LIBRARIES="${BLAS_ROOT}/lib/libblas.a;gfortran;gomp"
#export LAPACK_LIBRARIES="${LAPACK_ROOT}/lib/liblapack.a;gfortran;gomp"

# If you want IBM Power8 with K80 GPUs, uncomment the lines below (up
# to but not including "IBM Power8 + NVIDIA P100"), if they are not
# already uncommented.

#IBM Power8 + NVIDIA K80
#export OMPI_CXX=${TRILINOS_PATH}/packages/kokkos/bin/nvcc_wrapper
#export ARCH_CXX_FLAG="-mcpu=power8 -arch=sm_37"
#export ARCH_C_FLAG="-mcpu=power8"
#export BLAS_LIBRARIES="${BLAS_ROOT}/lib/libblas.a;gfortran;gomp"
#export LAPACK_LIBRARIES="${LAPACK_ROOT}/lib/liblapack.a;gfortran;gomp"

# If you want IBM Power8 with P100 GPUs, uncomment the lines below (up
# to but not including "Set up Tests/Examples"), if they are not
# already uncommented.

#IBM Power8 + NVIDIA P100
#export OMPI_CXX=${TRILINOS_PATH}/packages/kokkos/bin/nvcc_wrapper
#export ARCH_CXX_FLAG="-mcpu=power8 -arch=sm_60"
#export ARCH_C_FLAG="-mcpu=power8"
#export BLAS_LIBRARIES="${BLAS_ROOT}/lib/libblas.a;gfortran;gomp"
#export LAPACK_LIBRARIES="${LAPACK_ROOT}/lib/liblapack.a;gfortran;gomp"


# Set up Tests/Examples

export TESTS=ON
export EXAMPLES=OFF

# enable the stuff for muelu studies
export ENABLE_MUELU=${ENABLE_MUELU_}

# Set up number of OpenMP Threads:

###############################################
###############################################
# Don't change things below
###############################################
###############################################

# This sets Jenkins-related environment variables.  It's for the
# script below, which expects those environment variables to be set,
# even if not running Jenkins.

export JENKINS_DO_CUDA=${CUDA}
export JENKINS_DO_OPENMP=${OPENMP}
export JENKINS_DO_PTHREAD=${PTHREAD}
export JENKINS_DO_SERIAL=${SERIAL}
export JENKINS_DO_COMPLEX=${COMPLEX}

export JENKINS_ARCH_CXX_FLAG=${ARCH_CXX_FLAG} -fPIC
export JENKINS_ARCH_C_FLAG=${ARCH_C_FLAG} -fPIC

export JENKINS_DO_TESTS=${TESTS}
export JENKINS_DO_EXAMPLES=${EXAMPLES}



# This actually runs CMake.

source ${HOME}/src/trilinos-perf/SolverDriver/config/trilinos/configure-testbeds-jenkins

